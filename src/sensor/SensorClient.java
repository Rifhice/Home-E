// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package sensor;import ocsf.client.*;import java.io.*;import org.json.JSONObject;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class SensorClient extends AbstractClient{  //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  ChatIF clientUI;  Sensor sensor;  //Constructors ****************************************************    /**   * Constructs an instance of the chat client.   *   * @param host The server to connect to.   * @param port The port number to connect on.   * @param clientUI The interface type variable.   */    public SensorClient(String host, int port, ChatIF client)     throws IOException   {    super(host, port); //Call the superclass constructor    this.clientUI = client;    openConnection();  }  public void setSensor(Sensor sensor) {	  this.sensor = sensor;  }      //Instance methods ************************************************      /**   * This method handles all data that comes in from the server.   *   * @param msg The message from the server.   */  public void handleMessageFromServer(Object msg)   {	  if(msg instanceof String) {		  try {				JSONObject json = new JSONObject((String)msg);				System.out.println(json.toString());				switch (json.getString("verb")) {					case "post":						sensor.setId(json.getInt("id"));						sensor.getEnvironmentVariables().setId(json.getInt("idEnv"));						new ServerSensor(1114,this);						break;					default:						break;				}			  }			  catch (Exception e) {				e.printStackTrace();			}		  clientUI.handleMessage((String) msg);	  }  }    public void handleMessageFromSensor(String msg) {	  if(sensor != null) {		  if(msg.equals("isNotHome")) {			  sensor.getEnvironmentVariables().changeValue("false");		  }		  else if(msg.equals("isHome")) {			  sensor.getEnvironmentVariables().changeValue("true");		  }	  }	  else {		  System.out.println("No sensor !");	  }  }  /**   * This method handles all data coming from the UI               *   * @param message The message from the UI.       */  public void handleMessageFromClientUI(String message)  {    try    {      sendToServer(message);    }    catch(IOException e)    {    	clientUI.display        ("Could not send message to server.  Terminating client.");      quit();    }  }    /**   * This method terminates the client.   */  public void quit()  {    try    {      closeConnection();    }    catch(IOException e) {}    System.exit(0);  }}//End of ChatClient class