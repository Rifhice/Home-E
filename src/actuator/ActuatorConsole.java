package actuator;// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com import java.io.*;import java.util.ArrayList;import java.util.Arrays;import com.mollin.yapi.YeelightDevice;import com.mollin.yapi.exception.YeelightSocketException;/** * This class constructs the UI for a chat client.  It implements the * chat interface in order to activate the display() method. * Warning: Some of the code here is cloned in ServerConsole  * * @author Fran&ccedil;ois B&eacute;langer * @author Dr Timothy C. Lethbridge   * @author Dr Robert Lagani&egrave;re * @version July 2000 */public class ActuatorConsole implements ChatIF {  //Class variables *************************************************    /**   * The default port to connect on.   */  final public static String DEFAULT_HOST = "localhost";  final public static int DEFAULT_PORT = 1113;    //Instance variables **********************************************    /**   * The instance of the client that created this ConsoleChat.   */  ActuatorClient client;    //Constructors ****************************************************    public ActuatorConsole(String host, int port)   {    try     {      client= new ActuatorClient(host, port, this);    }     catch(IOException exception)     {      System.out.println("Erreur: Impossible d'installer la connexion !"                + " Client terminé.");      System.exit(1);    }  }    //Instance methods ************************************************    /**   * This method waits for input from the console.  Once it is    * received, it sends it to the client's message handler.   */  public void accept()   {    try    {      BufferedReader fromConsole =         new BufferedReader(new InputStreamReader(System.in));      String message;      while (true)       {        message = fromConsole.readLine();        client.handleMessageFromClientUI(message);      }    }     catch (Exception ex)     {      System.out.println        ("Erreur inattendue lors de la lecture de la console!");    }  }  /**   * This method overrides the method in the ChatIF interface.  It   * displays a message onto the screen.   *   * @param message The string to be displayed.   */  public void display(String message)   {    System.out.println("> " + message);  }    public ActuatorClient getClient() {	  return client;  }    @Override  public void handleMessage(String message) {  	// TODO Auto-generated method stub  	  }    //Class methods ***************************************************    public static void main(String[] args) {	  ActuatorConsole server = new ActuatorConsole(DEFAULT_HOST, DEFAULT_PORT);	  DiscreteArgument v2 = new DiscreteArgument("Polarite", new ArrayList<String>(Arrays.asList("ON","OFF")));	  Command c1 = new Command("Polarite", "Changez la polarite de la lampe", "lights", new ArrayList<Argument>(Arrays.asList(v2)));	  server.getClient().setActuator(new Actuator(server.getClient(), "Lumiere", "Gère une ampoule connectée", new ArrayList<Command>(Arrays.asList(c1))));  	  /*	  ActuatorConsole server = new ActuatorConsole(DEFAULT_HOST, DEFAULT_PORT);	  ContinuousArgument v1 = new ContinuousArgument("Temperature", 0, 20, 1);	  DiscreteArgument v2 = new DiscreteArgument("Temperature", new ArrayList<String>(Arrays.asList("Low","Medium","High")));	  Command c1 = new Command("Temperature", "latemp", "temp", new ArrayList<Argument>(Arrays.asList(v1,v2)));	  new Actuator(server.getClient(), "zpfzef", "dzeezhfhzfh", new ArrayList<Command>(Arrays.asList(c1)));  	  */  }}//End of ConsoleChat class